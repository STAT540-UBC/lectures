---
title: "Linear models with multiple factors"
title-slide-attributes:
  data-background-color: "#197aa0"
  data-background-opacity: "0.9"
  data-background-image: "https://github.com/STAT540-UBC/stat540-ubc.github.io/raw/main/images/stat540-logo-s.png"
  data-background-size: 12%
  data-background-position: 95% 90%
author: "Keegan Korthauer"
date: "1 February 2024"
date-format: long
format: 
  revealjs:
    chalkboard: true
    slide-number: c/t
    width: 1600
    height: 900
    logo: "https://github.com/STAT540-UBC/stat540-ubc.github.io/raw/main/images/stat540-logo-s.png"
    echo: true
    theme: [default, ../custom.scss]
    show-notes: false
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
---

```{r}
#| include: false
library(tidyverse)
library(GEOquery)
library(gridExtra)
theme_set(theme_bw(base_size = 20))
```


```{r, include=FALSE}
library(broom)
library(latex2exp)

eset <- getGEO("GSE4051", getGPL = FALSE)[[1]]

# recode time points
pData(eset) <- pData(eset) %>%
  mutate(sample_id = geo_accession) %>%
  mutate(dev_stage =  case_when(
    grepl("E16", title) ~ "E16",
    grepl("P2", title) ~ "P2",
    grepl("P6", title) ~ "P6",
    grepl("P10", title) ~ "P10",
    grepl("4 weeks", title) ~ "P28"
  )) %>%
  mutate(genotype = case_when(
    grepl("Nrl-ko", title) ~ "NrlKO",
    grepl("wt", title) ~ "WT"
  ))

pData(eset) <- pData(eset) %>%
  mutate(dev_stage = fct_relevel(dev_stage, "E16", "P2", "P6", "P10", "P28")) %>%
  mutate(genotype = as.factor(genotype)) %>%
  mutate(genotype = fct_relevel(genotype, "WT", "NrlKO"))

toLongerMeta <- function(expset) {
    stopifnot(class(expset) == "ExpressionSet")
    
    expressionMatrix <- lonExpressionressionMatrix <- exprs(expset) %>% 
    as.data.frame() %>%
    rownames_to_column("gene") %>%
    pivot_longer(cols = !gene, 
                 values_to = "expression",
                 names_to = "sample_id") %>%
    left_join(pData(expset) %>% select(sample_id, dev_stage, genotype),
            by = "sample_id")
  return(expressionMatrix)
}

twoGenes <- toLongerMeta(eset) %>% 
  filter(gene %in% c("1440645_at", "1443184_at")) %>%
  mutate(gene = ifelse(gene == "1440645_at", "BB114814", "Cdc14a")) 
twoGenest <- twoGenes
```

## Project next steps - written proposal

* Details [here](https://stat540-ubc.github.io/group_project_rubrics.html#written-proposal-5-pts)

* Expand upon your proposal lightning talk, incorporating feedback

* Include a plan for how team will work together
  - Aim for a fair balance
  - It is acceptable to modularize your overall workflow, assigning each team member some of the components (e.g. one group member performs planned analysis A, another group member perfroms planned analysis B, etc)
  - It is **_not_** acceptable for one group member to take on *sole responsibility* of the tasks of a certain type (e.g. one group member doing all of the analysis, or one group member defining the research question and hypotheses, etc)


## Last class...

1) How to compare means of different groups (2 or more) using a linear regression model
    + indicator variables to model the levels of a qualitative explanatory variable

2) Write a linear model using matrix notation
    + understand which matrix is built by R
  
3) Distinguish between **single** and **joint** hypotheses
    + $t$-tests vs $F$-tests  

## Comparing more than two groups

* **Biological question**: do gene expression levels differ by developmental stage?

* **Statistical question**: are gene expression generated by a single common distribution across all developmental stages? Or do the distributions differ by timepoint?

```{r}
#| code-fold: true
#| fig-width: 12.5
#| fig-height: 4
#| fig-align: center
bb1plot <- twoGenes %>% filter(gene == "BB114814") %>%
  ggplot(aes(x = dev_stage, y = expression)) + 
             geom_jitter(width = 0.2, alpha = 0.5) +
             labs(title = "BB114814") +
             theme(legend.position = "none") +
             ylim(5, 10) +
             xlab("") +
             stat_summary(aes(group=1), fun=mean, geom="line", colour="red")

cdcplot <- twoGenes %>% filter(gene == "Cdc14a") %>%
  ggplot(aes(x = dev_stage, y = expression)) + 
             geom_jitter(width = 0.2, alpha = 0.5) +
             labs(title = "Cdc14a") +
             theme(legend.position = "none") +
             ylim(5, 10) +
             xlab("") +
             stat_summary(aes(group=1), fun=mean, geom="line", colour="red")
grid.arrange(bb1plot, cdcplot, nrow = 1)
```

## **Quick review**: from $t$-test to linear regression

<center>

**2-sample t-test**

$$
Y \sim F; \ E[Y]= \mu_Y ; \ Z \sim G; \ E[Z]= \mu_Z
$$
$$ H_0: \mu_Y = \mu_Z$$

#### **↓**

#### **How? Why?**

#### **↓**

**Linear regression**

$$ Y = X\alpha + \epsilon; \text{ }\hspace{1em} H_0: \alpha_j = 0$$


## How: Cell means model using indicator variables 


$$
Y \sim F; \ E[Y]= \mu_Y ; \ Z \sim G; \ E[Z]= \mu_Z
$$

$$Y_{ij}= \mu_1 x_{ij1} + \mu_2 x_{ij2} + \varepsilon_{ij}; \ i=1, \dots, n; \ j={1,2}$$
$$x_{ij1}=\bigg\{\begin{array}{l} 
1\text{ if } j=1\\
0 \text{ otherwise}\\
\end{array}, \hspace{1em} x_{ij2}=\bigg\{\begin{array}{l} 
1\text{ if } j=2\\
0 \text{ otherwise}\\
\end{array}$$

::: columns
::: column
$$\begin{array}{l}
E[Y_{i1}] &= \mu_1 \\
E[Y_{i2}] &= \mu_2
\end{array}$$
:::
::: column
![](img/cellmeans_designmat.png)
:::
:::

## How: Reference-treatment parameterization using indicator variables

$$
Y \sim F; \ E[Y]= \mu_Y ; \ Z \sim G; \ E[Z]= \mu_Z
$$

$$Y_{ij}=\theta+ \tau_2 x_{ij2} + \varepsilon_{ij}; \ i=1, \dots, n; \ j={1,2}$$
$$x_{ij2}=\bigg\{\begin{array}{l} 
1\text{ if } j=2\\
0 \text{ otherwise}\\
\end{array}$$



::: columns
::: column
$$\begin{array}{l}
E[Y_{i1}] &= \theta=\mu_1 \\
E[Y_{i2}] &= \theta + \tau_2=\mu_1\ + (\mu_2 - \mu_1) = \mu_2
\end{array}$$
:::
::: column

![](img/param.png){width=4in fig-align="center"}
:::
:::

## How: Using matrix notation 

::: columns
::: column
2 group comparison:
<br>

$Y_{ij}=\theta+ \tau_2 x_{ij2} + \varepsilon_{ij}$ **→** $\bf{Y} = \bf{X\alpha+\epsilon}$
<br>


![](img/matrix_not.png){fig-align="center"}

:::
::: column
* $x_{ij2}$ is the second column of $X$ (design matrix)

* Tip: examine design matrix in R with `model.matrix()`

<br>

$$\color{red}{Y_{11} = 1*\theta + 0*\tau_2 + \epsilon_{11} =\theta + \epsilon_{11}}$$

$$\color{blue}{Y_{12} = 1*\theta + 1*\tau_2 + \epsilon_{12} = \theta + \tau_2 + \epsilon_{12}}$$
:::
:::

. . .

::: {.callout-tip}
# Recall
For comparisons involving more than 2 groups (ANOVA), we add indicator variables (columns of $X$)
:::


## Why: Flexible framework

$\bf{Y} = \bf{X\alpha+\epsilon}$ gives us a very flexible framework


![](img/LM_vbles.png){fig-align="center"}

These (and many more) can be accommodated by the design matrix (X)!

## Parameterizations

Different ways of writing the $\bf{X\alpha}=$ **[design matrix][parameter vector]** pair correspond to different **parameterizations** of the model

#### $$\bf{Y} = \bf{X\alpha} + \varepsilon$$

Understanding these concepts makes it easier: 

* to interpret and compare fitted models
* to fit models such that comparisons you care most about are directly addressed in the output

## Example: compare means between groups

![](img/diff_means.png){fig-align="center"}

. . .

By default, `lm` estimates group mean differences (with respect to a reference group):

```{r}
filter(twoGenes, gene == "BB114814") %>%
  lm(expression ~ dev_stage, data = .) %>%
  tidy()
```


## We can tell R to use the cell-means parameterization

Write the formula as `Y ~ 0 + x` in the `lm` call to remove the intercept $(\theta)$ parameter and fit cell means parameters instead

. . . 

```{r}
filter(twoGenes, gene == "BB114814") %>%
  lm(expression ~ 0 + dev_stage, data = .) %>%
  tidy()
```

What null hypotheses does the *t*-test column now represent?


## Converting between parameterizations

![](img/paramconvert.png){fig-align="center"}

::: columns
::: column
```{r}
filter(twoGenes, gene == "BB114814") %>%
  lm(expression ~ 0 + dev_stage, data = .) %>%
  tidy()
```
:::
::: column
```{r}
filter(twoGenes, gene == "BB114814") %>%
  lm(expression ~ dev_stage, data = .) %>%
  tidy()
```
:::
:::

## Learning objectives for today

1. Model more than one factor with multiple levels
    + build models with multiple categorical variables and their interaction

2. Distinguish between **simple** and **main** effects 
    + `lm` vs `anova` tests
  
3. Test main effects using **nested** models 
    + $t$-tests vs $F$-tests


## What if you have *2* categorical variables?

```{r}
#| echo: false
##########################################################
## simplying dev_stage to first and last timepoints
##########################################################

# Gene selected for illustration
oneGene <- toLongerMeta(eset) %>% 
  filter(gene == "1455695_at") %>%
  filter(dev_stage %in% levels(dev_stage)[c(1, nlevels(dev_stage))]) %>%
  mutate(dev_stage = droplevels(dev_stage),
        `genotype:dev_stage` = interaction(genotype, dev_stage))
```

For example: `genotype` and `dev_stage` (for simplicity, let's consider only E16 and P28)

- ANOVA is usually used to study models with one or more categorical variables (factors)

- Can we combine 2 levels in each of 2 factors into 4 groups (treat as one-way ANOVA)? 


```{r}
#| echo: false
#| fig-height: 3.3
#| fig-width: 5.5
set.seed(3849)
mu.hat <- oneGene %>% 
  group_by(`genotype:dev_stage`) %>% 
  summarize(meanExpr = mean(expression)) %>%
  data.frame()

p0 <- ggplot(oneGene, 
                aes(x = `genotype:dev_stage`, y = expression)) + 
  geom_jitter(width = 0.1, alpha = 0.6) +
  ylim(6, 13) + 
  geom_line(data = oneGene %>% group_by(`genotype:dev_stage`) %>%
              summarize(meanExp = mean(expression)),
            aes(x = `genotype:dev_stage`, y = meanExp, group = 1),
               size = 1.5) +
  ggtitle("One-way ANOVA (4 groups)")

p1 <- ggplot(oneGene, 
                aes(x = dev_stage, y = expression, colour = genotype)) + 
  geom_jitter(width = 0.1, alpha = 0.6) +
  ylim(6, 13) + 
  stat_summary(aes(group = genotype,colour=genotype), 
               fun = mean, geom = "line", size = 1.5) +
  ggtitle("Two-way ANOVA") +
  scale_color_manual(values = c('WT' = '#00BFC4', 'NrlKO' = '#F8766D'))

p0
```

## What if you have *2* categorical variables?

For example: `genotype` and `dev_stage` (for simplicity, let's consider only E16 and P28)

- ANOVA is usually used to study models with one or more categorical variables (factors)

- Can we combine 2 levels in each of 2 factors into 4 groups (treat as one-way ANOVA)? 

  - no way to separate effects of each factor, or their interaction

```{r}
#| echo: false
#| fig.height: 3.5
#| fig.width: 13
grid.arrange(p0, p1, nrow = 1, widths = c(1, 1.4))
```


## Two-way ANOVA (or a linear model with interaction)

::: columns
::: column
Which group means are we comparing in a model with 2 factors? 

$$\mu_1=E[Y_{(WT,E16)}]$$ 
$$\mu_2=E[Y_{(NrlKO,E16)}]$$
$$\mu_3=E[Y_{(WT,P28)}]$$
$$\mu_4=E[Y_{(NrlKO,P28)}]$$
:::
::: column
```{r}
#| echo: false
#| fig-height: 5
#| fig-width: 8
p1 <- p1 + ggtitle(paste0("Probe ", oneGene$gene[1]))
p1 +
  geom_text(aes(x = "E16", y = mu.hat[1,2], 
                label = TeX("$\\widehat{\\mu}_1$", output = "character")), 
            colour = "black", size = 6, parse = TRUE, nudge_x = -0.2) +
  geom_text(aes(x = "E16", y = mu.hat[2,2], 
                label = TeX("$\\widehat{\\mu}_2$", output = "character")), 
            colour="black", size=6,parse = TRUE, nudge_x = -0.2) +
  geom_text(aes(x = "P28", y = mu.hat[3,2], 
                label = TeX("$\\widehat{\\mu}_3$", output = "character")), 
            colour = "black", size = 6, parse = TRUE, nudge_x = 0.15) +
  geom_text(aes(x = "P28", y = mu.hat[4,2], 
                label = TeX("$\\widehat{\\mu}_4$", output = "character")), 
            colour = "black", size = 6, parse = TRUE, nudge_x = 0.15) +
  geom_point(aes(x = "E16", y = mu.hat[1,2]), size=3, shape=1, colour='black') +
  geom_point(aes(x = "E16", y = mu.hat[2,2]), size=3, shape=1, colour='black') +
  geom_point(aes(x = "P28", y = mu.hat[3,2]), size=3, shape=1, colour='black') +
  geom_point(aes(x = "P28", y = mu.hat[4,2]), size=3, shape=1, colour='black')

```
:::
:::

## Reference-treatment effect parameterization

* By default, `lm` assumes a **reference-treatment effect** parameterization 

* Mathematically, we just need *more* indicator variables, see [companion notes](https://github.com/STAT540-UBC/resources/blob/main/linearModels/lect07_companion_linear_models.md) for more details

```{r}
twoFactFit <- lm(expression ~ genotype * dev_stage, oneGene)
tidy(twoFactFit)
```

## Cell-means and treatment effects in the two-way model 

Why do we need more indicator variables?

```{r}
table(oneGene$dev_stage, oneGene$genotype)
```
```{r}
#| message: false
(means.2Fact <- oneGene %>%
   group_by(dev_stage, genotype) %>% 
   summarize(cellMeans = mean(expression)) %>% 
   ungroup() %>%
   mutate(txEffects = cellMeans - cellMeans[1],
          lmEst = tidy(twoFactFit)$estimate))
```


## What is the reference group here?

Reference group: **WT & E16**

As before, comparisons are relative to a reference but in this case there is a reference level *in each factor*: **WT and E16**

```{r}
#| echo: false
#| fig-width: 7.5
#| fig-height: 4.5
#| fig-align: center
p1 +
  geom_text(aes(x = "E16", y = mu.hat[1,2], 
                label = TeX("$\\widehat{\\theta}=\\widehat{\\mu}_1$", output = "character")),
            colour="black", size=6, parse = TRUE, nudge_x = -0.24) + 
  geom_point(aes(x = 1, y = mu.hat[1,2]), size=3, shape=1, colour='black')
```


## The reference: WT & E16

**Mean of reference group**: $\theta=E[Y_{WT,E16}]$ 
  
**`lm` estimate**: $\hat{\theta}$ is the sample mean of the group 

```{r}
tidy(twoFactFit)
```
```{r}
means.2Fact
```

In general, one is not interested in: $H_0: \theta=0$


## Simple genotype effect: WT *vs* NrlKO <font color="blue"> at E16 </font>

And now the "treatment effects"... 

```{r}
#| echo: false
#| fig-height: 4
#| fig-width: 8
#| fig-align: center
p1 +
  geom_text(aes(x = "E16", y = abs(mu.hat[1,2]+mu.hat[2,2])/2, 
                label = TeX("$\\widehat{\\tau}_{KO}$", output = "character")),
            colour = "black", size = 6, parse = TRUE, nudge_x = -0.2) + 
  geom_point(aes(x = "E16", y = mu.hat[1,2]), 
             size = 3, shape = 1, colour = 'black', alpha = 0.5) +
  geom_point(aes(x = "E16", y = mu.hat[2,2]), 
             size = 3, shape = 1, colour = 'black', alpha = 0.5) +
  geom_segment(aes(x = 0.96, y=mu.hat[1,2], xend = 0.96, yend = mu.hat[2,2]),
               colour = 1, arrow = arrow(length = unit(0.1,"in")), size = 0.75) 
```

. . . 

::: {.callout-note}
# Important: Simple/Conditional vs Main/Marginal effects
"Treatment effect" parameters represent **conditional effects**: effects at a given level of the other factor (e.g. effect of genotype at E16). These are also called **simple effects**. They do **_not_** represent marginal effects.

A **marginal effect**, on the other hand, is the overall effect of a factor, averaged over all levels of the other factor (e.g. the overall effect of genotype, averaged over all levels of developmental time). These are also called **main effects**.
:::

## Simple **genotype** effect: WT *vs* NrlKO <font color="blue"> at E16 </font>

**Effect of genotype at E16**: $\tau_{KO}=E[Y_{NrlKO,E16}]-E[Y_{WT,E16}]$

**`lm` estimate**: $\hat{\tau}_{KO}$ is the *difference* of sample respective means (check below)


```{r}
tidy(twoFactFit)
```

```{r}
means.2Fact
```

**But**, do you want to test the *conditional* effect at E16: $H_0: \tau_{KO}=0$?? 


## Simple **developmental** effect: E16 *vs* P28 <font color="blue"> in WT </font>

Similarly, for the other factor: $\tau_{P28}$ is the effect of developmental time (P28 vs E16)
**in WT**

If $\tau_{P28}=0$, what would the mean be in the WT group at P28?

```{r}
#| echo: false
#| fig-height: 4
#| fig-width: 8
#| fig-align: center
set.seed(034)
p1 +
  #circles around mean
  geom_point(aes(x = 1, y = mu.hat[1,2]), size = 3, shape = 1, colour = 'black') +
  geom_point(aes(x = 2, y = mu.hat[3,2]), size = 3, shape = 1, colour = 'black') 
```



## Simple **developmental** effect: E16 *vs* P28 <font color="blue"> in WT </font>


Similarly, for the other factor: $\tau_{P28}$ is the effect of developmental time (P28 vs E16)
**in WT**

If $\tau_{P28}=0$, what would the mean be in the WT group at P28?

```{r}
#| echo: false
#| fig-height: 4
#| fig-width: 8
#| fig-align: center
set.seed(034)
p1 +
#parameter and segments
  geom_text(aes(x = 2.2, y = abs(mu.hat[1,2]+mu.hat[3,2])/2, 
                label = TeX("$\\widehat{\\tau}_{P28}$", output = "character")), 
            colour = "black", size = 6, parse = TRUE) + 
  geom_segment(aes(x=2.1,y=mu.hat[1,2],xend=2.1,yend=mu.hat[3,2]),colour=1,
               arrow = arrow(length = unit(0.1,"in")), size = 0.75) + 
  geom_segment(aes(x = 1, y = mu.hat[1,2], xend = 2, yend = mu.hat[1,2]), 
               colour = 'darkgrey', linetype = 2, size = 0.75) +
  #circles around mean
  geom_point(aes(x = 1, y = mu.hat[1,2]), size = 3, shape = 1, colour = 'black') +
  geom_point(aes(x = 2, y = mu.hat[3,2]), size = 3, shape = 1, colour = 'black') 
```



## Simple developmental effect: E16 *vs* P28 <font color="blue"> in WT </font>

**Effect of development in WT**: $\tau_{P28}=E[Y_{WT,P28}]-E[Y_{WT,E16}]$

**`lm` estimate**: $\hat{\tau}_{P28}$ is the *difference* of respective sample means (check below)


```{r}
tidy(twoFactFit)
```

```{r}
means.2Fact
```


**Again**, do you want to test the *conditional* effect in WT: $H_0: \tau_{P28}=0$?? 


## Interaction effect

Is the effect of genotype the same at different developmental stages?

Equivalently: Is the development effect the same for both genotypes?

```{r}
#| echo: false
#| fig-height: 4
#| fig-width: 8
#| fig-align: center
mu.add <- mu.hat[3,2] - (mu.hat[1,2] - mu.hat[2,2])

set.seed(034)
p1.itx  <- p1 
p1.itx
```


## Interaction effect

Is the effect of genotype the same at different developmental stages?

Equivalently: Is the development effect the same for both genotypes?

```{r}
#| echo: false
#| fig-height: 4
#| fig-width: 8
#| fig-align: center
mu.add <- mu.hat[3,2] - (mu.hat[1,2] - mu.hat[2,2])

set.seed(034)
p1.itx  <- p1.itx +
  #circles at means    
     geom_point(aes(x = 2, y = mu.hat[3,2] - (mu.hat[1,2]-mu.hat[2,2])), 
                size = 3, shape = 1, colour = 'darkgrey') +
     geom_point(aes(x = 2, y = mu.hat[3,2]), 
                size = 3, shape = 1, colour = 'black') +
    #parameters and segments
  #additive position
    geom_segment(aes(x = 1, y = mu.hat[2,2], xend = 2, yend = mu.add), 
                 colour='grey', linetype = 2, size = 0.75)+
  #tau_P28
    geom_segment(aes(x = 2.1, y = mu.hat[3,2], xend = 2.1, yend = mu.add),
                 colour = 'grey', arrow = arrow(length = unit(0.1,"in")),
                 size = 0.75) +
    geom_text(aes(x = 2.2, y = abs(mu.hat[3,2]+mu.add)/2, 
                  label = TeX("$\\widehat{\\tau}_{KO}$", output = "character")),
              colour = 'grey', size = 6, parse = TRUE) 
p1.itx
```


## Interaction effect

Is the effect of genotype the same at different developmental stages?

Equivalently: Is the development effect the same for both genotypes?

```{r}
#| echo: false
#| fig-height: 4
#| fig-width: 8
#| fig-align: center
set.seed(034)
p1.itx <- p1.itx +
  #circles at means    
    geom_point(aes(x = 2, y = mu.hat[4,2]), size = 3, shape = 1, colour = 'blue') +
  #interaction
    geom_segment(aes(x = 2.1, y = mu.add, xend = 2.1, yend = mu.hat[4,2]),
                 colour = 'blue', arrow = arrow(length = unit(0.1,"in")),
                 size = 0.75) +
    geom_text(aes(x = 2.26, y = abs(mu.hat[4,2] + mu.add)/2, 
                  label = TeX(r"($\widehat{\tau}_{KO{:}P28}$)", output = "character")),
              colour = "blue", size = 6, parse = TRUE)
p1.itx
```

## Interaction effect

The genotype effect at E16 is $\tau_{KO}$. However, $\tau_{KO}$ does not seem to be the effect at P28. 

The difference is the interaction effect! If there's no interaction effect, $\tau_{KO:P28}=0$ 

```{r}
#| echo: false
#| fig-height: 4
#| fig-width: 8
#| fig-align: center
set.seed(034)
p1.itx
```

## Interaction effect

Difference of differences:

$$\tau_{KO:P28}= (E[Y_{NrlKO,P28}]-E[Y_{WT,P28}]) - (E[Y_{NrlKO,E16}]-E[Y_{WT,E16}])$$

In `lm` output:

```{r}
tidy(twoFactFit)
```


```{r}
means.2Fact
(means.2Fact$cellMeans[4] - means.2Fact$cellMeans[3]) - (means.2Fact$cellMeans[2] - means.2Fact$cellMeans[1]) 
```


## Summary of model parameters: with interaction 

model parameter | `lm` estimate| stats | interpretation
--------|---------|---------
$\theta$ | `(Intercept)` | $E[Y_{WT,E16}]$ | reference
$\tau_{KO}$ | `genotypeNrlKO` | $E[Y_{NrlKO,E16}] - E[Y_{WT,E16}]$ | *conditional* effect of NrlKO at E16
$\tau_{P28}$ | `dev_stageP28` | $E[Y_{WT,P28}] - E[Y_{WT,E16}]$ | *conditional* effect of P28 in WT
$\tau_{KO:P28}$ | `genotypeNrlKO:dev_stageP28`  | $E[Y_{NrlKO,P28}] - E[Y_{WT,P28}] - \tau_{KO}$  | *interaction* effect of NrlKO and P28

It is important to remember that `lm` reports **simple, not main** effects! 

Why? Because of the parameterization used! </font> (see [companion notes](https://github.com/STAT540-UBC/resources/blob/main/linearModels/lect07_companion_linear_models.md))

It can also be shown that $\tau_{KO:P28}=E[Y_{NrlKO,P28}]-\tau_{P28}-\tau_{KO}-\theta$ (see previous slide and companion notes)


## Let's examine these parameters closer 

For our model, `lm` tests 4 hypotheses:

::: columns
::: column
> ### $H_0: \theta=0$
### $H_0: \tau_{KO}=0$
### $H_0: \tau_{P28}=0$
### $H_0: \tau_{KO:P28}=0$

::: 
::: column

![](img/2way_param.png)

:::
:::

We may not be interested in these hypotheses, e.g., $\tau_{KO}$ and $\tau_{P28}$ are *conditional* effects *at* a given level of a factor (*simple effects*)


## Ex 1: nothing statistically significant, very flat genes 
```{r}
#| echo: false
# Gene selected for illustration
twoGenes <- toLongerMeta(eset) %>% 
  filter(gene %in% c("1442080_at","1448243_at")) %>%
  filter(dev_stage %in% levels(dev_stage)[c(1, nlevels(dev_stage))]) %>%
  mutate(dev_stage = droplevels(dev_stage),
        `genotype:dev_stage` = interaction(genotype, dev_stage))
```

::: {.panel-tabset}

# Plots
```{r}
#| echo: false
#| fig-width: 14
#| fig-height: 6
plot1Lim <- filter(twoGenes, gene == "1442080_at") %>%
  ggplot(aes(x = dev_stage, y = expression, group = genotype, colour = genotype)) + 
  geom_jitter(width = 0.1, alpha = 0.6) +
  labs(title = "1442080_at") +
  theme(legend.position = "none") +
  ylim(6, 10) +  
  stat_summary(fun = mean, geom = "line", size = 1.5) +
  scale_color_manual(values = c('WT' = '#00BFC4', 'NrlKO' = '#F8766D'))

plot2Lim <- filter(twoGenes, gene == "1448243_at") %>%
  ggplot(aes(x = dev_stage, y = expression, group = genotype, colour = genotype)) + 
  geom_jitter(width = 0.1, alpha = 0.6) +
  labs(title = "1448243_at") +
  ylim(6, 10) +  
  ylab("") +
  stat_summary(fun = mean, geom = "line", size = 1.5) +
  scale_color_manual(values = c('WT' = '#00BFC4', 'NrlKO' = '#F8766D'))

grid.arrange(plot1Lim, plot2Lim, nrow = 1, widths = c(1, 1.3))
```

# `lm` output

```{r}
filter(twoGenes, gene == "1442080_at") %>%
  lm(expression ~ genotype * dev_stage, data = .) %>%
  tidy()

filter(twoGenes, gene == "1448243_at") %>%
  lm(expression ~ genotype * dev_stage, data = .) %>%
  tidy()
```

:::



## Ex 2: statistically significant interaction (non-parallel) 

```{r}
#| echo: false
#| warning: false
# Gene selected for illustration
twoGenes <- toLongerMeta(eset) %>% 
  filter(gene %in% c("1434709_at","1458220_at")) %>%
  filter(dev_stage %in% levels(dev_stage)[c(1, nlevels(dev_stage))]) %>%
  mutate(dev_stage = droplevels(dev_stage),
        `genotype:dev_stage` = interaction(genotype, dev_stage))
```

::: {.panel-tabset}

# Plots

```{r}
#| echo: false
#| fig-width: 14
#| fig-height: 6
plot1Lim <- filter(twoGenes, gene == "1434709_at") %>%
  ggplot(aes(x = dev_stage, y = expression, group = genotype, colour = genotype)) + 
  geom_jitter(width = 0.1, alpha = 0.6) +
  labs(title = "1434709_at") +
  theme(legend.position = "none") +
  ylim(5, 11) +  
  stat_summary(fun = mean, geom = "line", size = 1.5) +
  scale_color_manual(values = c('WT' = '#00BFC4', 'NrlKO' = '#F8766D'))

plot2Lim <- filter(twoGenes, gene == "1458220_at") %>%
  ggplot(aes(x = dev_stage, y = expression, group = genotype, colour = genotype)) + 
  geom_jitter(width = 0.1, alpha = 0.6) +
  labs(title = "1458220_at") +
  ylim(5, 11) +  
  ylab("") +
  stat_summary(fun = mean, geom = "line", size = 1.5) +
  scale_color_manual(values = c('WT' = '#00BFC4', 'NrlKO' = '#F8766D'))

grid.arrange(plot1Lim, plot2Lim, nrow = 1, widths = c(1, 1.3))
```

# `lm` output

```{r}
filter(twoGenes, gene == "1434709_at") %>%
  lm(expression ~ genotype * dev_stage, data = .) %>%
  tidy()
filter(twoGenes, gene == "1458220_at") %>%
  lm(expression ~ genotype * dev_stage, data = .) %>%
  tidy()
```

:::

## Disagreement in simple effects with interaction

- Note that a significant interaction means the **simple** effects may not agree

- For the gene 1434709_at on the previous slide, compare the effect of genotype at E16 and P28:

| Effect | `lm` output | Estimate |
|---------|-----|:------:|
| Genotype at E16 | `genotypeNrlKO `   |     |  
| Genotype at P28 |   |    | 


. . . 

- **Main** effects (overall): does genotype have an effect on gene expression?

  - We can't (yet) answer this question! It depends (on the level of `dev_stage`)! (more later) 


## Ex 3: _BALANCED_ & only genotype at E16 is significant

For simplicity here, we'll add a fake observation in the NrlKO & E16 group (close to its mean) so that we have a *balanced* design 

::: {.callout-note}
In *unbalanced* designs the *main* effects are a *weighted* average of the simple effects, and the weights are not easy to interpret (beyond the scope of this course but worth noting the issue!)
:::

```{r}
#| echo: false
set.seed(469)
# Genes selected for illustration
twoGenes <- toLongerMeta(eset) %>% 
  filter(gene %in% c("1447753_at","1431651_at")) %>%
  filter(dev_stage %in% levels(dev_stage)[c(1, nlevels(dev_stage))]) %>%
  mutate(dev_stage = droplevels(dev_stage))
```

```{r}
# recall our unbalanced design
table(pData(eset)$genotype, pData(eset)$dev_stage)

# Duplicate sample GSM92615 (E16 NrlKO) and add noise expression
twoGenes <- filter(twoGenes, sample_id == "GSM92615") %>%
  mutate(expression = expression + rnorm(n(), 0, 0.05)) %>%
  rbind(twoGenes)
```


## Ex 3: _BALANCED_ & only genotype at E16 is significant

::: {.panel-tabset}

# Plots

```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 14
plot1Lim <- filter(twoGenes, gene == "1447753_at") %>%
  ggplot(aes(x = dev_stage, y = expression, group = genotype, colour = genotype)) + 
  geom_point(position = position_jitter(seed = 42, width = 0.1), alpha = 0.6) +
  labs(title = "1447753_at") +
  theme(legend.position = "none") +
  ylim(6.1, 7.1) +  
  stat_summary(fun = mean, geom = "line", size = 1.5) +
  scale_color_manual(values = c('WT' = '#00BFC4', 'NrlKO' = '#F8766D'))

plot2Lim <- filter(twoGenes, gene == "1431651_at") %>%
  ggplot(aes(x = dev_stage, y = expression, group = genotype, colour = genotype)) + 
  geom_point(position = position_jitter(seed = 42, width = 0.1), alpha = 0.6) +
  labs(title = "1431651_at") +
  ylim(6.1, 7.1) +  
  ylab("") +
  stat_summary(fun = mean, geom = "line", size = 1.5) +
  scale_color_manual(values = c('WT' = '#00BFC4', 'NrlKO' = '#F8766D'))

grid.arrange(plot1Lim, plot2Lim, nrow = 1, widths = c(1, 1.3))
```

# `lm` output

```{r}
filter(twoGenes, gene == "1447753_at") %>%
  lm(expression ~ genotype * dev_stage, data = .) %>%
  tidy()
filter(twoGenes, gene == "1431651_at") %>%
  lm(expression ~ genotype * dev_stage, data = .) %>%
  tidy()
```

:::

## Ex 3: _BALANCED_ & only genotype at E16 is significant

For both of these genes: 

* The interaction effect is not significant (almost parallel pattern)

* The effect of developmental stage is not significant for WT (almost flat pattern)

* There is a significant genotype effect at E16

* There may be a genotype effect *regardless* of the developmental stage (**main** effect). However, that hypothesis is **not** tested here!!  

. . .

* How do we test a **main** effect??  


## How do we test for a **main** effect?

- The main effect measures the *overall* association between the response and a factor - it is the (weighted) average of an effect over the levels of the other factor

- `anova()` can be used to test the main effects

- The following is the null hypothesis that there is no main effect of genotype:

$$H_0: \frac{(E[Y_{KO,E16}]-E[Y_{WT,E16}])+(E[Y_{KO,P28}]-E[Y_{WT,P28}])}{2}=0$$

::: {.callout-note}
For unbalanced experiments $H_0: w_1 \text{effect}_{E16}+ w_2 \text{effect}_{P28}=0$, where $w_1$ and $w_2$ are sample size weights
:::

## Main effects using `anova`

```{r}
filter(twoGenes, gene == "1447753_at") %>%
  lm(expression ~ genotype * dev_stage, data = .) %>%
  anova() %>% 
  tidy()
```

As we suspected, there is a **significant genotype effect** for this probe (1447753_at), i.e., its mean expression changes in NrlKO group (compared to WT), on average over developmental stages.

::: {.callout-note}
# Technical note: 
`anova()` uses *type I sums of squares* (sequential; conditional on previous terms), thus order matters in unbalanced designs! See this [primer](https://mcfromnz.wordpress.com/2011/03/02/anova-type-iiiiii-ss-explained/) on types of sums of squares for an intuitive explanation.
:::

## Main & interaction effects: important notes

- A **significant interaction effect** means that the effect of one factor depends on the levels of another 
  - e.g., the effect of genotype depends on developmental stage

- **Main effects**: are the (weighted) average of an effect over the levels of the other factor

- A **non-significant main effect** means that, on average, there's no evidence of a factor's effect
  - e.g., no evidence of a genotype effect, on average over both developmental stages

::: {.callout-caution} 
If the interaction is significant, it is possible that one or both simple effects are significant but the average effect (i.e., the main effect) is not. This is because the effect of a factor *depends on* the level of the other one. Looking at main effects alone may mask interesting results!
:::

## Additive models

- In some applications, we need to/want to test the interaction term

- However, additive models are simpler and smaller

- If there are no statistical or biological grounds to include the interaction term, additive models are preferred 

- Additive effects: $E[Y_{NrlKO,P28}]-E[Y_{WT,E16}]=\tau_{KO}+\tau_{P28}$

```{r}
filter(twoGenes, gene == "1447753_at") %>%
  lm(expression ~ genotype + dev_stage, data = .) %>%
  tidy()
```

:::{.callout-tip}

# Check for yourself!
Note the agreement between `genotypeNrlKO` in this (balanced) additive model, and the calculation of the main effect of genotype on slide 40 using the output of the (balanced) interaction model estimates on slide 38! 

:::

## **Additive models** and balanced designs


- In an additive model, the `lm()` parameters for balanced designs are **average effects**, over the levels of the other factor - same as in `anova()`!

  - Note the agreement between `lm` and `anova`; this is gone in unbalanced designs since weights are computed differently! 

- The intercept parameter is now $\bar{Y} - \bar{x}_{ij,KO}\hat{\tau}_{KO} - \bar{x}_{ij,P28}\hat{\tau}_{P28}$

::: {.callout-note}
*Type III sum of squares* (partial; conditional on all other terms in the model) are required for agreement in unbalanced designs (use `car::Anova()` to obtain) - beyond our scope
:::

## Parameters in additive models represent main effects

```{r}
(fit <- filter(twoGenes, gene == "1447753_at") %>%
  lm(expression ~ genotype + dev_stage, data = .)) %>%
  tidy()
```

```{r}
tidy(fit)$statistic[2]^2
```

```{r}
fit %>% anova() %>% tidy()
```

## Additive vs interaction models

```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 12
#| fig-align: center
#| warning: false
#cell-means for plot 1
addEst <- filter(twoGenes, gene == "1447753_at") %>%
  lm(expression ~ genotype + dev_stage, data = .) %>%
  summary() %>% .$coeff %>% .[,1]
multEst <- filter(twoGenes, gene == "1447753_at") %>%
  lm(expression ~ genotype * dev_stage, data = .) %>%
  summary() %>% .$coeff %>% .[,1]

mu.hat <- filter(twoGenes, gene == "1447753_at") %>% 
  mutate(itx = interaction(genotype, dev_stage)) %>%
  group_by(itx) %>% 
  summarize(meanExpr = mean(expression)) %>%
  pull(meanExpr)

plot1Lim <- plot1Lim +
  geom_segment(aes(x = 2, y = mu.hat[3], xend = 2, yend = mu.hat[4]), colour = 1,
               arrow = arrow(length = unit(0.1,"in"))) +
  geom_segment(aes(x = 1, y = mu.hat[1], xend = 1, yend = mu.hat[2]), colour = 1,
               arrow = arrow(length = unit(0.1,"in"))) +
  ggtitle("Interaction Model")
  
plotAdd <- filter(twoGenes, gene == "1447753_at") %>% 
  ggplot(aes(x = dev_stage, y = expression, colour = genotype)) + 
  geom_point(position = position_jitter(seed = 42, width = 0.1), alpha = 0.6) +
  labs(title = "Additive Model") +
  theme(legend.position = "none") +
  ylim(6.1, 7.1) +  
  #equal slope regression lines (not mathematical meaning)
  geom_segment(aes(x = 1, xend = 2, y = addEst[1],
                   yend = addEst[1] + addEst[3]), color = '#00BFC4', size = 1.5) +
  geom_segment(aes(x = 1, xend = 2, y = addEst[1] + addEst[2], 
                   yend = addEst[1] + addEst[2] + addEst[3]), color = '#F8766D', size = 1.5) +
  scale_color_manual(values = c('WT' = '#00BFC4', 'NrlKO' = '#F8766D')) +
  #parallel lines
  geom_segment(aes(x = 1, y = addEst[1], xend = 1, 
                   yend = addEst[1] + addEst[2]), 
               colour = 1, arrow = arrow(length = unit(0.1,"in"))) +
  geom_segment(aes(x = 2, y = addEst[1] + addEst[3], xend = 2,
                   yend = addEst[1] + addEst[2] + addEst[3]),
               colour = 1,arrow = arrow(length = unit(0.1,"in"))) +
  theme(legend.position = "right")

grid.arrange(plot1Lim, plotAdd, nrow = 1, widths = c(1, 1.35))
```


## Interactions with multi-level factors (more than 2 groups)

Back to our old friend the BB114814 gene

```{r}
#| echo: false
#| fig-height: 5
#| fig-width: 10
#| fig-align: center
twoGenest %>% filter(gene == "BB114814") %>%
  ggplot(aes(x = dev_stage, y = expression, colour = genotype)) + 
             geom_jitter(width = 0.2, alpha = 0.8) +
             labs(title = "BB114814") +
             ylim(5, 10) +
             xlab("")
```

## Interactions with multi-level factors (more than 2 groups)

We can generalize the regression model to factors with more levels (e.g., E16, P2, P10 and P28): we just add more indicator variables (and parameters)!

**With interaction**

```{r}
#| code-fold: true
bb1gene <- toLongerMeta(eset) %>% 
  filter(gene %in% c("1440645_at")) %>%
  mutate(gene = "BB114814")

(itxFit <- lm(expression ~ genotype*dev_stage, data = bb1gene)) %>%
  tidy()
```

::: {.callout-note}
All the `dev_stage` parameters are still **simple** effects, but we now have more: one for each level compared to the reference
:::

## Factors with multiple levels (cont.)

**Without interaction: additive**

```{r}
(addFit <- lm(expression ~ genotype + dev_stage, data = bb1gene)) %>%
  tidy()
```
Parameters are now **main** effects (on average over the levels of the other factor), but we have more!

::: {.callout-note}
# Question
Does developmental stage have a significant effect on this gene's expression?
:::

. . . 

We haven't tested that!!
    
## Recall: *F*-test and overall significance

- the *t*-test in linear regression allows us to test single hypotheses; these are given in the summary of `lm`
      $$H_0 : \tau_i = 0$$
      $$H_A : \tau_j \neq 0$$
- but we often like to test multiple hypotheses *simultaneously*: 
      $$H_0 : \tau_{P2} = \tau_{P6} = \tau_{P10} = \tau_{P28}=0\textrm{ [AND statement]}$$
      $$H_A : \tau_j \neq 0 \textrm{ for at least one j [OR statement]}$$ the *F*-test allows us to test such compound tests
      

## Overall effects: compound tests

**Interaction model with two factors: genotype and (5-level) developmental time**

`lm` output tests the following null hypotheses (OR):

> $H_0: \tau_{KO}=0$ (1 df) <br>
> $H_0: \tau_{P2}=\tau_{P6}=\tau_{P10}=\tau_{P28}=0$ (**in WT!**, 4 df) <br>
> $H_0: \tau_{KO:P2}=\tau_{KO:P6}=\tau_{KO:P10}=\tau_{KO:P28}=0$ (4 df)

`anova` output: tests overall effects of a factor (AND) controlling for the previous ones 

```{r}
anova(itxFit) %>% tidy()
```


## Overall effects: compound tests (cont.)

**Additive model with genotype and development time (5-level); no interaction**

`lm` output tests the following null hypotheses (OR)

> $H_0: \tau_{KO}=0$ (1 df) <br>
$H_0: \tau_{P2}=\tau_{P6}=\tau_{P10}=\tau_{P28}=0$ (**on average!**, 4 df)

`anova` output tests overall effects of a factor (AND) controlling for the previous ones

```{r}
anova(addFit) %>% tidy()
```

::: {.callout-note}
The $t$-test in `lm` and the $F$-test (1 df) in `anova` for genotype are not equivalent here due to unbalancedness (order matters)
:::

## These examples are just special cases of *nested models*

For example: does development have a significant effect on gene expression?

Compare the models with and without `dev_stage`!


**Model 1**: `expression ~ genotype`

**Model 2**: `expression ~ genotype + dev_stage`

Mathematically:

**Model 1**: $Y_{ijk}=\theta + \tau_{KO}x_{KO,ijk} + \varepsilon$

**Model 2**: $Y_{ijk}=\theta + \tau_{KO}x_{KO,ijk} + \tau_{P2}x_{P2,ijk}+\tau_{P6}x_{P6,ijk}+\tau_{P10}x_{P10,ijk}+\tau_{P28}x_{P28,ijk}+ \varepsilon$
 
 $$H_0: \tau_{P2}=\tau_{P6}=\tau_{P10}=\tau_{P28}=0$$

 The $x_{**,ijk}$ are indicator variables (see [companion notes](https://github.com/STAT540-UBC/resources/blob/main/linearModels/lect07_companion_linear_models.md))
 

## More general: F-test to compare nested models

$H_0: \alpha_{k+1} = ... = \alpha_{k+p}$

$$F =  \frac{(SS_{reduced} - SS_{full})/(p)}{SS_{full} / (n-p-k-1)} \sim \mathbf{F}_{p, \,n-p-k-1}$$
This $F$-statistic compares the following two models:

- Reduced (k + 1 parameters): 
$$y_i = \alpha_0 + \alpha_1 x_{i1} + ... +  \alpha_k x_{ik} + \epsilon_i$$
- Full (p + k + 1 parameters): 
$$y_i = \alpha_0 + \alpha_1 x_{i1} + ... +  \alpha_k x_{ik} + ... +  \alpha_p x_{ip} + \epsilon_i$$

. . .

A *significant* F-statistic here means that the full model explains significantly more variation in the outcome variable than the reduced model


## Nested models in R


```{r}
addReduced <- lm(expression ~ genotype, data = bb1gene)
addFull <- lm(expression ~ genotype + dev_stage, data = bb1gene)
anova(addReduced,addFull)
```
```{r}
anova(addFull) %>% tidy()
```



## Another special case: overall goodness of fit!

Compare the full *vs* the intercept-only models (compound test)!
$$H_0: \tau_{KO}=\tau_{P2}=\tau_{P6}=\tau_{P10}=\tau_{P28}=0 \, \ (5 \text{ df})$$

```{r}
addReduced <- lm(expression ~ 1, data = bb1gene)
anova(addReduced,addFull)
```



## Goodness of fit also given in output of `lm`


```{r, highlight.output=21, output.lines=c(2:22)}
summary(addFull)
```




## Summary so far

- ***t*-tests** can be used to test the equality of **2** population means

- **ANOVA** can be used to test the equality of **more than 2** population means simultaneously (main effects)

- **Linear regression** provides a general framework for modelling the relationship between a response and different type of explanatory variables

  - *t*-tests are used to test the significance of **simple effects** (*individual* coefficients)

  - *F*-tests are used to test the significance of **main effects** (*simultaneously* multiple coefficients) 

  - *F*-tests are used to compare nested models (**overall** effects or **goodness of fit**)

- Next up: continuous explanatory variables! Multiple genes!